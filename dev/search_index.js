var documenterSearchIndex = {"docs":
[{"location":"api/highlevel/#High-Level-Interface","page":"High-level Interface","title":"High-Level Interface","text":"","category":"section"},{"location":"api/highlevel/","page":"High-level Interface","title":"High-level Interface","text":"High-level helpers for constructing callable model wrappers and AtomsCalculators bridges.","category":"page"},{"location":"api/highlevel/#KIMPortableModels.KIMCalculator","page":"High-level Interface","title":"KIMPortableModels.KIMCalculator","text":"KIMCalculator(model_name::String; kwargs...) -> AtomsCalculators.AbstractCalculator\n\nCreate a simple AtomsCalculators-compatible calculator that wraps a KIM model.\n\nThis provides a minimal interface to KIM models that works with the AtomsCalculators ecosystem. The calculator can compute energies and forces for AtomsBase systems.\n\nArguments\n\nmodel_name::String: KIM model identifier\n\nKeyword Arguments\n\nunits::Symbol: Unit system (default: :metal)\ncompute::Vector{Symbol}: Properties to compute (default: [:energy, :forces])\n\nExample\n\nusing AtomsBase, AtomsCalculators\ncalc = KIMCalculator(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\nenergy = AtomsCalculators.potential_energy(calc, system)\nforces = AtomsCalculators.forces(calc, system)\n\n\n\n\n\n","category":"type"},{"location":"api/highlevel/#KIMPortableModels.KIMModel-Tuple{String}","page":"High-level Interface","title":"KIMPortableModels.KIMModel","text":"KIMModel(model_name::String; units=:metal, neighbor_function=nothing, compute=[:energy, :forces]) -> Function\n\nCreate a high-level KIM model computation function.\n\nThis function initializes a KIM-API model and returns a closure that can be called repeatedly to perform energy and force calculations. The returned function handles all low-level KIM-API operations automatically.\n\nArguments\n\nmodel_name::String: KIM model identifier (e.g., \"SWStillingerWeber1985Si__MO405512056662_006\")\n\nKeyword Arguments\n\nunits::Union{Symbol,NamedTuple}: Unit system to use. Can be:\n:metal: Å, eV, e, K, ps (LAMMPS metal units)\n:real: Å, kcal/mol, e, K, fs (LAMMPS real units)\n:si: m, J, C, K, s (SI units)\n:cgs: cm, erg, statC, K, s (CGS units)\n:electron: Bohr, Hartree, e, K, fs (Atomic units)\nCustom named tuple of units:  (leng)\nneighbor_function: Custom neighbor function (not yet implemented)\ncompute::Vector{Symbol}: Properties to compute, can include :energy and/or :forces\n\nReturns\n\nA function f(species, positions, cell, pbc) that:\n\nAccepts:\nspecies::Vector{String}: Chemical symbols for each atom\npositions::Vector{SVector{3,Float64}}: Atomic positions\ncell::Matrix{Float64}: Unit cell matrix (3×3)\npbc::Vector{Bool}: Periodic boundary conditions [x,y,z]\nReturns:\nNamedTuple: Results with fields :energy and/or :forces\n\nThrows\n\nErrorException: If model creation fails or requested properties not supported\n\nExample\n\nusing KIMPortableModels, StaticArrays, LinearAlgebra\n\n# Create model function\nmodel = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\n\n# Define system\nspecies = [\"Si\", \"Si\"]\npositions = [\n    SVector(0.    , 0.    , 0.    ),\n    SVector(1.3575, 1.3575, 1.3575),\n]\ncell = Matrix([[0.0 2.715 2.715] \n               [2.715 0.0 2.715] \n               [2.715 2.71, 0.0]])\npbc = [true, true, true]\n\n# Compute properties\nresults = model(species, positions, cell, pbc)\nprintln(\"Energy: \", results[:energy])\nprintln(\"Forces: \", results[:forces])\n\nImplementation Notes\n\nAutomatically generates ghost atoms for periodic boundary conditions\nPre-computes species mappings for efficiency\nHandles multiple cutoff distances if required by the model\nUses zero-based indexing internally to match KIM-API conventions\n\n\n\n\n\n","category":"method"},{"location":"api/species/#Species-Handling","page":"Species Handling","title":"Species Handling","text":"","category":"section"},{"location":"api/species/","page":"Species Handling","title":"Species Handling","text":"Helpers for mapping between species identifiers and the codes required by KIM-API models.","category":"page"},{"location":"api/species/#KIMPortableModels.SpeciesSymbols","page":"Species Handling","title":"KIMPortableModels.SpeciesSymbols","text":"SpeciesSymbols\n\nTuple containing all chemical element symbols supported by KIM-API.\n\nThis includes all elements from the periodic table from hydrogen (H) to oganesson (Og), plus \"electron\" as a special particle type. The order corresponds to the atomic numbers, with \"electron\" at index 1.\n\nExample\n\nSpeciesSymbols[2]  # \"H\" (hydrogen)\nSpeciesSymbols[15] # \"Si\" (silicon)\n\n\n\n\n\n","category":"constant"},{"location":"api/species/#KIMPortableModels.SpeciesToAtomicNumbers","page":"Species Handling","title":"KIMPortableModels.SpeciesToAtomicNumbers","text":"SpeciesToAtomicNumbers\n\nSimple dict map between species symbol and atomic numbers\n\n\n\n\n\n","category":"constant"},{"location":"api/species/#KIMPortableModels.SpeciesName","page":"Species Handling","title":"KIMPortableModels.SpeciesName","text":"species.jl\n\nKIM-API species management and utilities.\n\nThis module provides functions for handling chemical species in KIM-API, including species name lookup, validation, and mapping between string representations and integer codes used by KIM models.\n\nKey Types\n\nSpeciesName: Type alias for species integer codes\n\nConstants\n\nSpeciesSymbols: Tuple of all supported chemical element symbols\n\nKey Functions\n\nget_species_number: Convert species string to integer code\nget_species_symbol: Convert species integer code to string\nget_species_codes_from_model: Map species strings to model-specific codes\nget_species_map_closure: Create efficient species mapping function\n\nModel Integration\n\nThe module provides functions to check which species are supported by a specific KIM model and create efficient mappings for repeated use.\n\n\n\n\n\n","category":"type"},{"location":"api/species/#KIMPortableModels.get_species_codes_from_model-Tuple{Model, Vector{String}}","page":"Species Handling","title":"KIMPortableModels.get_species_codes_from_model","text":"get_species_codes(model::Model, species_strings::Vector{String})\n\nCheck species support and return array of KIM species codes for each particle. Throws error if any species not supported. From mdstresslab++\n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.get_species_map_closure-Tuple{Model}","page":"Species Handling","title":"KIMPortableModels.get_species_map_closure","text":"get_static_species_map(model::Model, species_list::Vector{String}) -> Vector{Cint}\nGet a static closure that maps species strings to their codes.\n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.get_species_number-Tuple{String}","page":"Species Handling","title":"KIMPortableModels.get_species_number","text":"get_species_number(name::String) -> Cint\n\nGet species name constant from string \n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.get_species_support_and_code-Tuple{Model, Int32}","page":"Species Handling","title":"KIMPortableModels.get_species_support_and_code","text":"get_species_support_and_code(model::Model, species::Cint) -> (supported, code)\n\nCheck if a species is supported and get its code.\n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.get_species_symbol-Tuple{Int32}","page":"Species Handling","title":"KIMPortableModels.get_species_symbol","text":"get_species_number(species::Cint) -> String\n\nGet species symbol constant from string (e.g., \"Ar\", \"Si\", etc.)\n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.get_supported_species_map-Tuple{Model}","page":"Species Handling","title":"KIMPortableModels.get_supported_species_map","text":"get_unique_species_map(model::Model, species_list::Vector{String})\n\nMap all species strings to their codes from the model. TODO: Rename :symbol? It might gte confusing with actual Julia :Symbols\n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.get_unique_species_map-Tuple{Model, Vector{String}}","page":"Species Handling","title":"KIMPortableModels.get_unique_species_map","text":"get_unique_species_map(model::Model, species_list::Vector{String})\n\nCheck unique species and return mapping dict. More efficient when many particles of same species.\n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.species_name_equal-Tuple{Int32, Int32}","page":"Species Handling","title":"KIMPortableModels.species_name_equal","text":"species_name_equal(lhs::SpeciesName, rhs::SpeciesName) -> Bool\n\nCheck if two species names are equal.\n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.species_name_known-Tuple{Int32}","page":"Species Handling","title":"KIMPortableModels.species_name_known","text":"species_name_known(species::SpeciesName) -> Bool\n\nCheck if species name is known/valid in KIM-API.\n\n\n\n\n\n","category":"method"},{"location":"api/species/#KIMPortableModels.species_name_not_equal-Tuple{Int32, Int32}","page":"Species Handling","title":"KIMPortableModels.species_name_not_equal","text":"species_name_not_equal(lhs::SpeciesName, rhs::SpeciesName) -> Bool\n\nCheck if two species names are not equal.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#Model-Management","page":"Model Management","title":"Model Management","text":"","category":"section"},{"location":"api/model/","page":"Model Management","title":"Model Management","text":"Low-level wrappers for constructing, configuring, and executing KIM-API models.","category":"page"},{"location":"api/model/#KIMPortableModels.ComputeArguments","page":"Model Management","title":"KIMPortableModels.ComputeArguments","text":"ComputeArguments\n\nWrapper for KIM-API compute arguments pointer.\n\nThis mutable struct holds a pointer to a KIM-API compute arguments instance, which contains all the data needed for model calculations including particle positions, species, and output arrays.\n\nFields\n\np::Ptr{Cvoid}: C pointer to the KIM-API compute arguments\n\n\n\n\n\n","category":"type"},{"location":"api/model/#KIMPortableModels.Model","page":"Model Management","title":"KIMPortableModels.Model","text":"Model\n\nWrapper for KIM-API model pointer.\n\nThis mutable struct holds a pointer to a KIM-API model instance. The pointer should be initialized using create_model() and destroyed using destroy_model!() to prevent memory leaks.\n\nFields\n\np::Ptr{Cvoid}: C pointer to the KIM-API model\n\n\n\n\n\n","category":"type"},{"location":"api/model/#KIMPortableModels.compute!-Tuple{Model, ComputeArguments}","page":"Model Management","title":"KIMPortableModels.compute!","text":"compute!(model::Model, args::ComputeArguments)\n\nExecute the model computation.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.create_compute_arguments-Tuple{Model}","page":"Model Management","title":"KIMPortableModels.create_compute_arguments","text":"create_compute_arguments(model::Model) -> ComputeArguments\n\nCreate compute arguments for the model.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.create_model-Tuple{Numbering, LengthUnit, EnergyUnit, ChargeUnit, TemperatureUnit, TimeUnit, String}","page":"Model Management","title":"KIMPortableModels.create_model","text":"create_model(numbering, length_unit, energy_unit, charge_unit, temperature_unit, time_unit, model_name) -> (Model, Bool)\n\nCreate a new KIM-API model instance with specified units.\n\nArguments\n\nnumbering::Numbering: Indexing scheme (zeroBased or oneBased)\nlength_unit::LengthUnit: Length unit (A, Bohr, cm, m, nm)\nenergy_unit::EnergyUnit: Energy unit (eV, J, kcal_mol, etc.)\ncharge_unit::ChargeUnit: Charge unit (C, e, statC)\ntemperature_unit::TemperatureUnit: Temperature unit (K)\ntime_unit::TimeUnit: Time unit (fs, ps, ns, s)\nmodel_name::String: Name of the KIM model to load\n\nReturns\n\nModel: The created model instance\nBool: Whether the specified units were accepted by the model\n\nThrows\n\nErrorException: If model creation fails\n\nExample\n\nmodel, accepted = create_model(\n    zeroBased, A, eV, e, K, ps,\n    \"SW_StillingerWeber_1985_Si__MO_405512056662_006\"\n)\nif !accepted\n    error(\"Model rejected the specified units\")\nend\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.destroy_compute_arguments!-Tuple{Model, ComputeArguments}","page":"Model Management","title":"KIMPortableModels.destroy_compute_arguments!","text":"destroy_compute_arguments!(model::Model, args::ComputeArguments)\n\nDestroy compute arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.destroy_model!-Tuple{Model}","page":"Model Management","title":"KIMPortableModels.destroy_model!","text":"destroy_model!(model::Model)\n\nDestroy a Model and free memory. TODO: Is this needed? The model should automatically be destroyed when the Julia process exits.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.get_argument_support_status-Tuple{ComputeArguments, ComputeArgumentName}","page":"Model Management","title":"KIMPortableModels.get_argument_support_status","text":"get_argument_support_status(args::ComputeArguments, arg_name::ComputeArgumentName) -> SupportStatus\n\nGet the support status for a compute argument.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.get_influence_distance-Tuple{Model}","page":"Model Management","title":"KIMPortableModels.get_influence_distance","text":"get_influence_distance(model::Model) -> Float64\n\nGet the influence distance (cutoff) from the model.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.get_neighbor_list_pointers-Tuple{Model}","page":"Model Management","title":"KIMPortableModels.get_neighbor_list_pointers","text":"get_neighbor_list_pointers(model::Model) -> (n_lists, cutoffs, will_not_request)\n\nGet neighbor list information from the model.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.set_argument_pointer!-Tuple{ComputeArguments, ComputeArgumentName, Union{Ref{Float64}, VecOrMat{Float64}}}","page":"Model Management","title":"KIMPortableModels.set_argument_pointer!","text":"set_argument_pointer!(args::ComputeArguments, arg_name::ComputeArgumentName, ptr)\n\nSet a double argument pointer.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.set_argument_pointer!-Tuple{ComputeArguments, ComputeArgumentName, Union{Ref{Int32}, Vector{Int32}}}","page":"Model Management","title":"KIMPortableModels.set_argument_pointer!","text":"set_argument_pointer!(args::ComputeArguments, arg_name::ComputeArgumentName, ptr)\n\nSet an integer argument pointer.\n\n\n\n\n\n","category":"method"},{"location":"api/model/#KIMPortableModels.set_callback_pointer!-Tuple{ComputeArguments, ComputeCallbackName, LanguageName, Ptr{Nothing}, Ptr{Nothing}}","page":"Model Management","title":"KIMPortableModels.set_callback_pointer!","text":"set_callback_pointer!(args::ComputeArguments, callback::ComputeCallbackName,\n                     language::LanguageName, func_ptr, data_ptr)\n\nSet a callback function pointer.\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#Constants-and-Units","page":"Constants & Units","title":"Constants & Units","text":"","category":"section"},{"location":"api/constants/","page":"Constants & Units","title":"Constants & Units","text":"Enumerations and helpers mirroring the KIM-API constant definitions and unit styles.","category":"page"},{"location":"api/constants/#KIMPortableModels.compute_argument_name_to_string-Tuple{Integer}","page":"Constants & Units","title":"KIMPortableModels.compute_argument_name_to_string","text":"compute_argument_name_to_string(value::Cint) -> String\n\nConvert compute argument name integer to string\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.energy_unit_to_string-Tuple{Integer}","page":"Constants & Units","title":"KIMPortableModels.energy_unit_to_string","text":"energy_unit_to_string(value::Cint) -> String\n\nConvert energy unit integer to string\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_charge_unit-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_charge_unit","text":"get_charge_unit(name::String) -> Cint\n\nGet charge unit constant from string name (\"C\", \"e\")\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_compute_argument_name-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_compute_argument_name","text":"get_compute_argument_name(name::String) -> Cint\n\nGet compute argument name constant from string\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_compute_callback_name-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_compute_callback_name","text":"get_compute_callback_name(name::String) -> Cint\n\nGet compute callback name constant from string\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_energy_unit-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_energy_unit","text":"get_energy_unit(name::String) -> Cint\n\nGet energy unit constant from string name (\"eV\", \"J\", \"kcal_mol\", etc.)\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_language_name-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_language_name","text":"get_language_name(name::String) -> Cint\n\nGet language name constant from string (\"c\", \"cpp\", \"fortran\")\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_length_unit-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_length_unit","text":"get_length_unit(name::String) -> Cint\n\nGet length unit constant from string name (\"A\", \"Bohr\", \"cm\", \"m\", \"nm\")\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_numbering-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_numbering","text":"get_numbering(name::String) -> Cint\n\nGet numbering constant from string name (\"zeroBased\" or \"oneBased\")\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_support_status-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_support_status","text":"get_support_status(name::String) -> Cint\n\nGet support status constant from string (\"required\", \"optional\", \"notSupported\")\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_temperature_unit-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_temperature_unit","text":"get_temperature_unit(name::String) -> Cint\n\nGet temperature unit constant from string name (\"K\")\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.get_time_unit-Tuple{String}","page":"Constants & Units","title":"KIMPortableModels.get_time_unit","text":"get_time_unit(name::String) -> Cint\n\nGet time unit constant from string name (\"fs\", \"ps\", \"ns\", \"s\")\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.length_unit_to_string-Tuple{Integer}","page":"Constants & Units","title":"KIMPortableModels.length_unit_to_string","text":"length_unit_to_string(value::Cint) -> String\n\nConvert length unit integer to string\n\n\n\n\n\n","category":"method"},{"location":"api/constants/#KIMPortableModels.numbering_to_string-Tuple{Integer}","page":"Constants & Units","title":"KIMPortableModels.numbering_to_string","text":"numbering_to_string(value::Cint) -> String\n\nConvert numbering integer to string\n\n\n\n\n\n","category":"method"},{"location":"api/utils/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"api/utils/","page":"Utilities","title":"Utilities","text":"Numerical helper routines shared across the high-level and low-level interfaces.","category":"page"},{"location":"api/utils/#KIMPortableModels.add_forces-Union{Tuple{T}, Tuple{AbstractArray{T}, AbstractArray{<:Integer}}} where T","page":"Utilities","title":"KIMPortableModels.add_forces","text":"add_forces(idx::AbstractArray{<:Integer}, src::AbstractArray)\n\nPerform a scatter-add operation to accumulate forces. This function is specifically designed to accumulate forces from multiple atoms into a single destination array based on the provided indices.\n\nArguments\n\nsrc::AbstractArray: Source array containing forces to be added.\nidx::AbstractArray{<:Integer}: Indices in the destination array where   forces will be accumulated.\n\nReturns\n\nA new array containing the accumulated forces at the specified indices.\n\nNote\n\nThis function assumes that idx contains valid indices for the destination array.\nThe destination array is initialized to zero before accumulation.\n\n```\n\n\n\n\n\n","category":"method"},{"location":"api/utils/#KIMPortableModels.scatter_add!-Tuple{AbstractArray, AbstractArray, AbstractArray}","page":"Utilities","title":"KIMPortableModels.scatter_add!","text":"scatter_add!(dst::AbstractArray, src::AbstractArray, idx::AbstractArray; dims=1)\n\nPerform a scatter-add operation in-place. This function adds elements from src to dst at the indices specified by idx. It is useful for accumulating results in a pre-allocated destination vector.\n\nArguments\n\ndst::AbstractArray: Destination vector where elements will be added.\nsrc::AbstractArray: Source vector whose elements are added to dst.\nidx::AbstractArray{<:Integer}: Indices in dst where src elements will be added.\ndims::Int: Dimension along which to scatter-add. Default is 1.\n\nReturns\n\nThe modified dst vector with accumulated results.\n\n\n\n\n\n","category":"method"},{"location":"api/neighborlist/#Neighbor-Lists","page":"Neighbor Lists","title":"Neighbor Lists","text":"","category":"section"},{"location":"api/neighborlist/","page":"Neighbor Lists","title":"Neighbor Lists","text":"Construction of neighbor lists and callback helpers bridging to the KIM-API.","category":"page"},{"location":"api/neighborlist/#KIMPortableModels.@cast_as_kim_neigh_fptr-Tuple{Any}","page":"Neighbor Lists","title":"KIMPortableModels.@cast_as_kim_neigh_fptr","text":"@cast_as_kim_neigh_fptr(func)\n\nMacro to create a C function pointer for KIM-API neighbor list callbacks. This macro converts a Julia function into a C-compatible function pointer for use with KIM-API's neighbor list interface.\n\n\n\n\n\n","category":"macro"},{"location":"api/neighborlist/#KIMPortableModels.NeighborListContainer","page":"Neighbor Lists","title":"KIMPortableModels.NeighborListContainer","text":"NeighborListContainer\n\nContainer for neighbor list data with KIMNeighborList backend.\n\nThis mutable struct stores the neighbor list query function for efficient access during KIM-API callback queries. It includes the query function and temporary storage for index conversions.\n\nFields\n\nneighbors::Vector{Vector{Int32}}: Pre-computed neighbors for each atom\ntemp_storage::Vector{Int32}: Reusable storage for current neighbor query\n\nNotes\n\nThe temp_storage field is used to convert between Julia's 1-based indexing and KIM-API's 0-based indexing during callback execution, avoiding memory allocations in the hot path.\n\n\n\n\n\n","category":"type"},{"location":"api/neighborlist/#KIMPortableModels.create_kim_neighborlists-Tuple{Vector, Vector{StaticArraysCore.SVector{3, Float64}}, Matrix{Float64}, Vector{Bool}, Union{Real, Vector{Float64}}}","page":"Neighbor Lists","title":"KIMPortableModels.create_kim_neighborlists","text":"Create neighbor lists for KIM-API using KIMNeighborList C++ backend. It uses the lower level API of KIMNeighborList to return all required information. Below is the copy pasted code from the KIMNeighborList package\n\nTODO: Add the desired function in KIMNeighborLists, so that here it is blank call to the neighlist library?\n\nReturns: (nlcontainer, allcoordinates, allspecies, contributing, atomindices)\n\nnl_container: Neighbor list data for each cutoff\nall_coordinates: Positions including ghost atoms  \nall_species: Species including ghost atoms\ncontributing: 1 for real atoms, 0 for ghosts\natom_indices: Original atom index for each position\n\nThe function creates neighbor lists for each cutoff using the KIMNeighborList backend and handles ghost atom generation for periodic boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/neighborlist/#KIMPortableModels.kim_neighbors_callback-Tuple{Ptr{Nothing}, Int32, Ptr{Float64}, Int32, Int32, Ptr{Int32}, Ptr{Ptr{Int32}}}","page":"Neighbor Lists","title":"KIMPortableModels.kim_neighbors_callback","text":"kimneighborscallback(...)\n\nKIM-API callback for neighbor queries. All indices are 0-based from KIM.\n\n\n\n\n\n","category":"method"},{"location":"api/libkim/#Library-Management","page":"Library Management","title":"Library Management","text":"","category":"section"},{"location":"api/libkim/","page":"Library Management","title":"Library Management","text":"Utilities responsible for locating and loading the KIM-API shared library.","category":"page"},{"location":"api/libkim/#KIMPortableModels._find_libkim_path-Tuple{}","page":"Library Management","title":"KIMPortableModels._find_libkim_path","text":"_find_libkim_path() -> String\n\nBest-effort search for the KIM-API shared library. Returns an empty string when the library cannot be located.\n\n\n\n\n\n","category":"method"},{"location":"api/libkim/#KIMPortableModels.is_kim_available-Tuple{}","page":"Library Management","title":"KIMPortableModels.is_kim_available","text":"is_kim_available() -> Bool\n\nReturn true when the KIM-API library can be located. The lookup is refreshed each time to pick up newly installed libraries.\n\n\n\n\n\n","category":"method"},{"location":"api/libkim/#KIMPortableModels.refresh_libkim!-Tuple{}","page":"Library Management","title":"KIMPortableModels.refresh_libkim!","text":"refresh_libkim!(; warn_if_missing=false) -> String\n\nRe-evaluate the location of the KIM-API library and update libkim. Optionally emits a warning if the library is still missing.\n\n\n\n\n\n","category":"method"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide will help you get up and running with KIMPortableModels.jl.","category":"page"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/#Step-1:-Install-KIM-API","page":"Getting Started","title":"Step 1: Install KIM-API","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"KIM-API provides packages for various OS and distributions. For all the information, and instructions on how to install KIM-API, visit KIM-API Github repo, and the installation notes.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Easiest way to install KIM-API is via Conda:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"conda create -n kim-api kim-api=2.4 -c conda-forge\nconda activate kim-api\nexport KIM_API_LIB=${CONDA_PREFIX}/lib/libkim-api.so # for KIMPortableModels.jl to find the library","category":"page"},{"location":"getting_started/#Step-2:-Install-KIMPortableModels.jl","page":"Getting Started","title":"Step 2: Install KIMPortableModels.jl","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(url=\"https://github.com/ipcamit/KIMPortableModels.jl.git\")","category":"page"},{"location":"getting_started/#Step-3:-Test-Installation","page":"Getting Started","title":"Step 3: Test Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using KIMPortableModels\n\n# This should not throw an error\nprintln(\"KIM-API library loaded successfully!\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"If you get a library loading error, you may need to set the KIM_API_LIB environment variable:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"export KIM_API_LIB=\"/path/to/libkim-api.so\"","category":"page"},{"location":"getting_started/#Your-First-Calculation","page":"Getting Started","title":"Your First Calculation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Let's compute the energy and forces for a simple silicon system using the Stillinger-Weber potential.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using KIMPortableModels\nusing StaticArrays\nusing LinearAlgebra\n\n# Create a KIM model\nmodel = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\n\n# Define a simple silicon system\nspecies = [\"Si\", \"Si\"]\npositions = [\n        SVector(0.    , 0.    , 0.    ),\n        SVector(1.3575, 1.3575, 1.3575),\n]\n# Silicon lattice cell\ncell = Matrix([[0.0 2.715 2.715] \n               [2.715 0.0 2.715] \n               [2.715 2.715 0.0]])\n\n# Use periodic boundary conditions\npbc = [true, true, true]\n\n# Compute energy and forces\nresults = model(species, positions, cell, pbc)\n\nprintln(\"Energy: $(results[:energy]) eV\")\nprintln(\"Forces:\")\nfor (i, force) in enumerate(eachcol(results[:forces]))\n    println(\"  Atom $i: $force eV/Å\")\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Expected output:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Energy: -8.67279650983989 eV\n\nForces:\n  Atom 1: [0.0, 0.0, -4.336808689942018e-19] eV/Å\n  Atom 2: [-6.505213034913027e-19, -6.505213034913027e-19, -8.673617379884035e-19] eV/Å","category":"page"},{"location":"getting_started/#Understanding-the-Results","page":"Getting Started","title":"Understanding the Results","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Energy: Total potential energy of the system in eV\nForces: Forces on each atom in eV/Å (note the units depend on your chosen unit system)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The forces should sum to approximately zero for an isolated system due to Newton's third law.","category":"page"},{"location":"getting_started/#Exploring-Available-Models","page":"Getting Started","title":"Exploring Available Models","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"KIM-API provides access to hundreds of validated interatomic models. You can browse them at openkim.org.","category":"page"},{"location":"getting_started/#Working-with-Different-Elements","page":"Getting Started","title":"Working with Different Elements","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Copper using EAM potential\ncu_model = KIMPortableModels.KIMModel(\"EAM_Dynamo_MendelevSordeletKramer_2007_CuZr__MO_120596890176_005\")\n\n# Define copper system\ncu_species = [\"Cu\", \"Cu\", \"Cu\", \"Cu\"]\ncu_positions = [\n    SVector(0.0, 0.0, 0.0),\n    SVector(1.805, 1.805, 0.0),\n    SVector(1.805, 0.0, 1.805),\n    SVector(0.0, 1.805, 1.805)\n]\n\n# FCC copper lattice parameter\na_cu = 3.61\ncu_cell = Matrix(a_cu * I(3))\ncu_pbc = [true, true, true]\n\ncu_results = cu_model(cu_species, cu_positions, cu_cell, cu_pbc)\nprintln(\"Copper energy: $(cu_results[:energy]) eV\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Copper energy: -13.120417106582778 eV","category":"page"},{"location":"getting_started/#Unit-Systems","page":"Getting Started","title":"Unit Systems","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"KIMPortableModels.jl supports multiple unit systems. The default is :metal (LAMMPS metal units):","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Explicit unit specification\nmodel_real = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\",\n                      units=:real)  # kcal/mol, Å, fs\n\nmodel_si = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\",\n                    units=:si)    # J, m, s","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Unit System Length Energy Time Notes\n:metal Å eV ps Most common for atomistic simulations\n:real Å kcal/mol fs LAMMPS real units\n:si m J s SI base units\n:cgs cm erg s CGS units\n:electron Bohr Hartree fs Atomic units","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"You can also specify custom collection of units by passing a tuple of units during model creation:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"custom_units = (length=KIMPortableModels.A, energy=KIMPortableModels.eV, time=KIMPortableModels.fs, charge=KIMPortableModels.e, temperature=KIMPortableModels.K)\nmodel_custom = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\",\n                        units=custom_units)","category":"page"},{"location":"getting_started/#Performance-Considerations","page":"Getting Started","title":"Performance Considerations","text":"","category":"section"},{"location":"getting_started/#Reuse-Model-Functions","page":"Getting Started","title":"Reuse Model Functions","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Creating a KIM model has overhead, so reuse the function:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Good: create once\nmodel = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\n\n# Use many times\nfor configuration in configurations\n    results = model(species, configuration.positions, cell, pbc)\n    # Process results...\nend","category":"page"},{"location":"getting_started/#Choose-Appropriate-Compute-Options","page":"Getting Started","title":"Choose Appropriate Compute Options","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"If you only need energy (not forces):","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"model_energy_only = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\",\n                             compute=[:energy])","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This can be significantly faster for large systems.","category":"page"},{"location":"getting_started/#Common-Issues","page":"Getting Started","title":"Common Issues","text":"","category":"section"},{"location":"getting_started/#Library-Not-Found","page":"Getting Started","title":"Library Not Found","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"ERROR: KIM-API library not found in system paths.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Solution: Install KIM-API or set the environment variable:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"export KIM_API_LIB=\"/usr/local/lib/libkim-api.so\"","category":"page"},{"location":"getting_started/#Model-Not-Found","page":"Getting Started","title":"Model Not Found","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"ERROR: Model creation failed with error code: 1","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Solutions:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Check the model name spelling\nInstall the model: kim-api-collections-management install user <model-name>\nBrowse available models at openkim.org","category":"page"},{"location":"getting_started/#Species-Not-Supported","page":"Getting Started","title":"Species Not Supported","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"ERROR: Species 'Unobtainium' not supported by model","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Solution: Check which elements the model supports. Most models specify supported elements in their documentation.","category":"page"},{"location":"getting_started/#Next-Steps","page":"Getting Started","title":"Next Steps","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Check out advanced usage patterns in the examples\nCheck out Examples for real-world applications\nExplore the API Reference for detailed documentation\nVisit openkim.org to discover more models","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This page provides practical examples of using KIMPortableModels.jl for various molecular simulation tasks.","category":"page"},{"location":"examples/#Basic-Examples","page":"Examples","title":"Basic Examples","text":"","category":"section"},{"location":"examples/#Computing-Energy-and-Forces-with-KIMModel","page":"Examples","title":"Computing Energy and Forces with KIMModel","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using KIMPortableModels\nusing StaticArrays\nusing LinearAlgebra\n\n# Create a KIM model for silicon\nmodel = KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\n\n# Define a silicon dimer\nspecies = [\"Si\", \"Si\"]\npositions = [\n    SVector(0.0, 0.0, 0.0),     # First silicon atom\n    SVector(2.35, 0.0, 0.0)     # Second silicon atom at equilibrium distance\n]\n\n# Set up periodic cell (large enough to avoid self-interaction)\ncell = Matrix(10.0 * I(3))  # 10×10×10 Å cubic cell\npbc = [true, true, true]\n\n# Compute properties\nresults = model(species, positions, cell, pbc)\n\nprintln(\"Energy: $(results[:energy]) eV\")\nprintln(\"Force on atom 1: $(results[:forces][:, 1]) eV/Å\")\nprintln(\"Force on atom 2: $(results[:forces][:, 2]) eV/Å\")","category":"page"},{"location":"examples/#Using-AtomsBase-and-AtomsCalculators","page":"Examples","title":"Using AtomsBase and AtomsCalculators","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using KIMPortableModels, AtomsBase, AtomsCalculators\nusing StaticArrays, Unitful\n\n# Create a KIM calculator\ncalc = KIMCalculator(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\n\n# Create AtomsBase system with units\nparticles = [\n    :Si => SVector(0.0u\"Å\", 0.0u\"Å\", 0.0u\"Å\"),\n    :Si => SVector(2.35u\"Å\", 0.0u\"Å\", 0.0u\"Å\")\n]\n\ncell_vectors = (\n    SVector(10.0u\"Å\", 0.0u\"Å\", 0.0u\"Å\"),\n    SVector(0.0u\"Å\", 10.0u\"Å\", 0.0u\"Å\"),\n    SVector(0.0u\"Å\", 0.0u\"Å\", 10.0u\"Å\")\n)\n\nsystem = FlexibleSystem(particles; cell_vectors=cell_vectors, periodicity=(true, true, true));\n\n# Use AtomsCalculators interface\nenergy = AtomsCalculators.potential_energy(calc, system)\nforces = AtomsCalculators.forces(calc, system)\n\nprintln(\"Energy: $(energy) eV\")\nprintln(\"Forces: $(forces)\")\n\n# Or call calculator directly for all properties\nresults = calc(system)\nprintln(\"All results: $(results)\")","category":"page"},{"location":"examples/#Energy-Minimization","page":"Examples","title":"Energy Minimization","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using KIMPortableModels, Optim\nusing StaticArrays, LinearAlgebra\n\n# Set up model and initial structure\nmodel = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\nspecies = [\"Si\", \"Si\"]\ncell = [5.43 0.0 0.0; 0.0 5.43 0.0; 0.0 0.0 5.43]\npbc = [true, true, true]\n\n# Objective function for optimization\nfunction objective(x)\n    pos = [SVector(0.0, 0.0, 0.0), SVector(x[1], x[2], x[3])]\n    results = model(species, pos, cell, pbc)\n    return results[:energy]\nend\n\n# Optimize second atom position\ninitial_pos = [2.5, 0.0, 0.0]  # Starting guess\nresult = result = optimize(objective, initial_pos, BFGS(), Optim.Options(f_tol=1e-4))\n\nprintln(\"Optimized position: \", result.minimizer)\nprintln(\"Minimum energy: \", result.minimum)","category":"page"},{"location":"examples/#Advanced-Examples","page":"Examples","title":"Advanced Examples","text":"","category":"section"},{"location":"examples/#Equivalence-Between-Methods","page":"Examples","title":"Equivalence Between Methods","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example demonstrates that KIMModel (raw arrays) and KIMCalculator (AtomsBase) produce identical results:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using KIMPortableModels, AtomsBase, StaticArrays\n\nmodel_name = \"SW_StillingerWeber_1985_Si__MO_405512056662_006\"\n\n# Method 1: Raw arrays with KIMModel\nmodel = KIMModel(model_name)\nspecies = [\"Si\", \"Si\"]\npositions = [SVector(0.0, 0.0, 0.0), SVector(2.35, 0.0, 0.0)]\ncell = [5.43 0.0 0.0; 0.0 5.43 0.0; 0.0 0.0 5.43]\npbc = [true, true, true]\n\nraw_results = model(species, positions, cell, pbc)\n\n# Method 2: AtomsBase system with KIMCalculator\ncalc = KIMCalculator(model_name)\nparticles = [\n    :Si => SVector(0.0u\"Å\", 0.0u\"Å\", 0.0u\"Å\"),\n    :Si => SVector(2.35u\"Å\", 0.0u\"Å\", 0.0u\"Å\")\n]\ncell_vectors = (\n    SVector(5.43u\"Å\", 0.0u\"Å\", 0.0u\"Å\"),\n    SVector(0.0u\"Å\", 5.43u\"Å\", 0.0u\"Å\"),\n    SVector(0.0u\"Å\", 0.0u\"Å\", 5.43u\"Å\")\n)\nsystem = FlexibleSystem(particles; cell_vectors=cell_vectors, periodicity=(true, true, true));\natomsbase_results = calc(system)\n\n# Verify equivalence\n@assert raw_results[:energy] ≈ atomsbase_results[:energy]\n@assert raw_results[:forces] ≈ atomsbase_results[:forces]\n\nprintln(\"Both methods produce identical results!\")\nprintln(\"Energy: $(raw_results[:energy]) eV\")","category":"page"},{"location":"examples/#Different-Unit-Systems","page":"Examples","title":"Different Unit Systems","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using KIMPortableModels, StaticArrays, LinearAlgebra\n\nmodel_name = \"SW_StillingerWeber_1985_Si__MO_405512056662_006\"\nspecies = [\"Si\", \"Si\"]\npositions = [SVector(0.0, 0.0, 0.0), SVector(2.35, 0.0, 0.0)]\ncell = Matrix(5.43 * I(3))\npbc = [true, true, true]\n\n# Different unit systems\nunits_list = [:metal, :real, :si]\nresults = Dict()\n\nfor units in units_list\n    calc = KIMCalculator(model_name, units=units)\n    model_fn = calc.model_fn\n    result = model_fn(species, positions, cell, pbc)\n    results[units] = result[:energy]\nend\n\nprintln(\"Energy in different units:\")\nprintln(\"  Metal (eV): $(results[:metal])\")\nprintln(\"  Real (kcal/mol): $(results[:real])\")\nprintln(\"  SI (J): $(results[:si])\")\n\n# Convert real units to eV for comparison\nenergy_real_in_eV = results[:real] * 0.043364\nprintln(\"  Real-> eV: $(energy_real_in_eV)\")","category":"page"},{"location":"simulator_integration/#Adding-KIM-Support-to-Your-Simulator","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"This guide provides step-by-step instructions for integrating KIMPortableModels.jl into your Julia-based molecular dynamics simulator or computational physics code.","category":"page"},{"location":"simulator_integration/#Overview","page":"Adding KIM Support to Your Simulator","title":"Overview","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"KIMPortableModels.jl provides a high-level interface that makes it easy to add support for hundreds of validated interatomic models to your simulator. The integration requires minimal code changes and follows Julia best practices.","category":"page"},{"location":"simulator_integration/#Quick-Integration-Steps","page":"Adding KIM Support to Your Simulator","title":"Quick Integration Steps","text":"","category":"section"},{"location":"simulator_integration/#1.-Basic-Integration-Pattern-Using-highlevel-functions-provided-by-KIMPortableModels.jl","page":"Adding KIM Support to Your Simulator","title":"1. Basic Integration Pattern Using highlevel functions provided by KIMPortableModels.jl","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"Here's the minimal code pattern for adding KIM model support to your simulator:","category":"page"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"using KIMPortableModels\nusing StaticArrays\nusing LinearAlgebra\n\n# Your simulator's main computation function\nfunction simulate_system(positions, species, cell, pbc, model_name; timesteps=1000, dt=0.001)\n\n    # Initialize KIM model (do this once)\n    kim_model = KIMPortableModels.KIMModel(model_name)\n\n    # Your simulation loop\n    for step in 1:timesteps\n        # Compute forces and energy using KIM model\n        results = kim_model(species, positions, cell, pbc)\n\n        energy = results[:energy]\n        forces = results[:forces]  # 3×N matrix of forces\n\n        # Integrate equations of motion (your existing code)\n        positions, velocities = integrate_motion(positions, velocities, forces, dt)\n\n        # Your analysis/output code here\n        if step % 100 == 0\n            println(\"Step $step: Energy = $energy\")\n        end\n    end\n\n    return positions, velocities\nend","category":"page"},{"location":"simulator_integration/#2.-Data-Format-Requirements","page":"Adding KIM Support to Your Simulator","title":"2. Data Format Requirements","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"Your simulator needs to provide data in the following formats:","category":"page"},{"location":"simulator_integration/#Required-Inputs","page":"Adding KIM Support to Your Simulator","title":"Required Inputs","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"species: Vector{String} - Chemical symbols (e.g., [\"Si\", \"Si\", \"O\"])\npositions: Vector{SVector{3,Float64}} - Atomic positions in Cartesian coordinates\ncell: Matrix{Float64} - 3×3 unit cell matrix (columns are lattice vectors)\npbc: Vector{Bool} - Periodic boundary conditions [x, y, z]","category":"page"},{"location":"simulator_integration/#Outputs","page":"Adding KIM Support to Your Simulator","title":"Outputs","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"results[:energy]: Float64 - Total potential energy\nresults[:forces]: Matrix{Float64} - 3×N matrix of forces on each atom","category":"page"},{"location":"simulator_integration/#Advanced-Integration","page":"Adding KIM Support to Your Simulator","title":"Advanced Integration","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"For more performant/fine-grained control, you can use the low-level API directly instead of the high-level KIMModel function.","category":"page"},{"location":"simulator_integration/#Low-Level-API-Usage","page":"Adding KIM Support to Your Simulator","title":"Low-Level API Usage","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"Here's how to initialize and use KIM models directly with the low-level interface:","category":"page"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"using KIMPortableModels\n\n# 1. Create model with specific units\nmodel, accepted = KIMPortableModels.create_model(\n    KIMPortableModels.zeroBased,  # Use 0-based indexing\n    KIMPortableModels.A,          # Angstrom\n    KIMPortableModels.eV,         # Electron volt\n    KIMPortableModels.e,          # Elementary charge\n    KIMPortableModels.K,          # Kelvin\n    KIMPortableModels.ps,         # Picosecond\n    \"SW_StillingerWeber_1985_Si__MO_405512056662_006\"\n)\n\nif !accepted\n    error(\"Units not accepted by model\")\nend\n\n# 2. Create compute arguments\nargs = KIMPortableModels.create_compute_arguments(model)\n\n# 3. Check what the model supports\nenergy_support = KIMPortableModels.get_argument_support_status(args, KIMPortableModels.partialEnergy)\nforces_support = KIMPortableModels.get_argument_support_status(args, KIMPortableModels.partialForces)\n\n# 4. Set up data arrays\nn_atoms = 2\ncoords = [0.0 2.0; 0.0 0.0; 0.0 0.0]  # 3×N matrix\nspecies_codes = Int32[14, 14]  # Silicon atoms (atomic number 14)\ncontributing = ones(Int32, n_atoms)  # All atoms contribute to energy\nn_ref = Ref{Int32}(n_atoms)\nenergy_ref = Ref{Float64}(0.0)\nforces = zeros(Float64, 3, n_atoms)\n\n# 5. Set argument pointers\nKIMPortableModels.set_argument_pointer!(args, KIMPortableModels.numberOfParticles, n_ref)\nKIMPortableModels.set_argument_pointer!(args, KIMPortableModels.particleSpeciesCodes, species_codes)\nKIMPortableModels.set_argument_pointer!(args, KIMPortableModels.coordinates, coords)\nKIMPortableModels.set_argument_pointer!(args, KIMPortableModels.particleContributing, contributing)\nKIMPortableModels.set_argument_pointer!(args, KIMPortableModels.partialEnergy, energy_ref)\nKIMPortableModels.set_argument_pointer!(args, KIMPortableModels.partialForces, forces)\n\n# 6. Compute energy and forces\nKIMPortableModels.compute!(model, args)\n\nprintln(\"Energy: $(energy_ref[]) eV\")\nprintln(\"Forces: $forces\")\n\n# 7. Clean up (optional - handled by finalizers)\nKIMPortableModels.destroy_compute_arguments!(model, args)\nKIMPortableModels.destroy_model!(model)","category":"page"},{"location":"simulator_integration/#Neighbor-Lists","page":"Adding KIM Support to Your Simulator","title":"Neighbor Lists","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"KIM models that require neighbor lists need special handling. Here's how to set up neighbor list callbacks:","category":"page"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"# Get neighbor list requirements from model\nn_cutoffs, cutoffs, will_not_request = KIMPortableModels.get_neighbor_list_pointers(model)\n\nif n_cutoffs > 0\n    println(\"Model requires $n_cutoffs neighbor lists with cutoffs: $cutoffs\")\n\n    # Create neighbor lists using KIMNeighborList.jl\n    nl_handle, all_coords, all_species, contributing, atom_indices =\n        KIMPortableModels.create_kim_neighborlists(\n            species, positions, cell, pbc, cutoffs;\n            will_not_request_ghost_neigh = will_not_request\n        )\n\n    # Set up neighbor list callback\n    GC.@preserve nl_handle all_coords begin\n        callback_ptr = @cast_as_kim_neigh_fptr(KIMPortableModels.kim_neighbors_callback)\n        data_ptr = pointer_from_objref(nl_handle)\n        KIMPortableModels.set_callback_pointer!(args, KIMPortableModels.GetNeighborList,\n                                               KIMPortableModels.c, callback_ptr, data_ptr)\n\n        # Now compute with neighbor lists\n        KIMPortableModels.compute!(model, args)\n    end\nend","category":"page"},{"location":"simulator_integration/#Performance-Tips","page":"Adding KIM Support to Your Simulator","title":"Performance Tips","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"Model Reuse: Create models once and reuse them\nMemory Layout: Use column-major layout for coordinates (3×N matrix)\nSpecies Codes: Pre-compute species codes using get_species_number(\"Si\")\nEnergy-Only: Skip force calculation setup if only energy is needed","category":"page"},{"location":"simulator_integration/#Finding-and-Using-KIM-Models","page":"Adding KIM Support to Your Simulator","title":"Finding and Using KIM Models","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"Browse available models at openkim.org or use the KIM-API tools:","category":"page"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"# List installed models\nkim-api-collections-management list\n\n# Install a specific model\nkim-api-collections-management install user SW_StillingerWeber_1985_Si__MO_405512056662_006","category":"page"},{"location":"simulator_integration/#Detailed-Implementation-Guide","page":"Adding KIM Support to Your Simulator","title":"Detailed Implementation Guide","text":"","category":"section"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"For a comprehensive, step-by-step guide with more detailed examples and advanced topics, see the blog post:","category":"page"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"Through the Looking Glass: Implementing KIM-API for Your Molecular Dynamics Simulator","category":"page"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"This blog covers:","category":"page"},{"location":"simulator_integration/","page":"Adding KIM Support to Your Simulator","title":"Adding KIM Support to Your Simulator","text":"Detailed KIM-API concepts and architecture\nAdvanced neighbor list handling\nPerformance optimization strategies\nDebugging and troubleshooting tips\nReal-world integration examples","category":"page"},{"location":"#KIMPortableModels.jl","page":"Home","title":"KIMPortableModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: logo)","category":"page"},{"location":"#KIMPortableModels.KIMPortableModels","page":"Home","title":"KIMPortableModels.KIMPortableModels","text":"KIMPortableModels.jl\n\nA comprehensive Julia interface to the KIM-API (Knowledgebase of Interatomic Models).\n\nThis package provides both low-level and high-level interfaces to KIM-API, enabling Julia users to access the extensive collection of validated  interatomic models available through the OpenKIM framework.\n\nFeatures\n\nHigh-level functional interface with KIMModel()\nAutomatic species mapping and validation\nEfficient neighbor list generation with periodic boundary conditions\nSupport for multiple unit systems (metal, real, SI, CGS, atomic)\nMemory-safe wrappers around KIM-API C functions\nComprehensive error handling and validation\n\nQuick Start\n\nusing KIMPortableModels, StaticArrays, LinearAlgebra\n\n# Create model function\nmodel = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\n\n# Define system\nspecies = [\"Si\", \"Si\"]\npositions = [\n    SVector(0.    , 0.    , 0.    ),\n    SVector(1.3575, 1.3575, 1.3575),\n]\ncell = Matrix([[0.0 2.715 2.715] \n               [2.715 0.0 2.715] \n               [2.715 2.715 0.0]])\npbc = [true, true, true]\n\n# Compute properties\nresults = model(species, positions, cell, pbc)\nprintln(\"Energy: \", results[:energy])\nprintln(\"Forces: \", results[:forces])\n\nModules\n\nlibkim.jl: KIM-API library loading and initialization\nconstants.jl: KIM-API constants, enumerations, and unit systems\nmodel.jl: Low-level model creation and management\nspecies.jl: Species handling and validation\nneighborlist.jl: Neighbor list generation and callbacks\nhighlevel.jl: High-level user interface\n\nUnits\n\nThe package supports multiple unit systems:\n\n:metal: Ångström, eV, electron charge, Kelvin, picosecond (LAMMPS metal)\n:real: Ångström, kcal/mol, electron charge, Kelvin, femtosecond (LAMMPS real)\n:si: meter, Joule, Coulomb, Kelvin, second\n:cgs: centimeter, erg, statCoulomb, Kelvin, second\n:electron: Bohr, Hartree, electron charge, Kelvin, femtosecond\n\nKIM-API Integration\n\nThis package wraps the KIM-API C library and provides:\n\nAutomatic memory management\nJulia-native data structures\nType-safe function interfaces\nComprehensive documentation\n\nDependencies\n\nKIM-API C library (must be installed separately)\nKIMNeighborList.jl for efficient C++ neighbor searching\nStaticArrays.jl for position vectors\nCEnum.jl for C enumeration bindings\n\nFor more information about KIM-API and available models, visit:\n\nhttps://openkim.org\nhttps://kim-api.readthedocs.io\n\n\n\n\n\n","category":"module"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"KIMPortableModels.jl provides both low-level and high-level interfaces to KIM-API, enabling Julia users to access the extensive collection of validated interatomic models available through the OpenKIM framework. Main purpose of this package is to provide a convenient way to integrate KIM models into Julia based MD simulators. Think of this as the Julia equivalent of the KIMPY package but with additional wrappers for ease of use.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"High-level functional interface with KIMModel()\nAutomatic species mapping and validation\nDefault support for multiple unit systems (metal, real, SI, CGS, atomic)\nMemory-safe wrappers around KIM-API C functions\nComprehensive error handling and validation","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"\nusing KIMPortableModels, StaticArrays, LinearAlgebra\n\n# Create model function\nmodel = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\")\n\n# Define system\nspecies = [\"Si\", \"Si\"]\npositions = [\n    SVector(0.    , 0.    , 0.    ),\n    SVector(1.3575, 1.3575, 1.3575),\n]\ncell = Matrix([[0.0 2.715 2.715] \n               [2.715 0.0 2.715] \n               [2.715 2.715 0.0]])\npbc = [true, true, true]\n\n# Compute properties\nresults = model(species, positions, cell, pbc)\nprintln(\"Energy: \", results[:energy])\nprintln(\"Forces: \", results[:forces])","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Prerequisites","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You must have the KIM-API C++ library installed on your system. Visit openkim.org for detailed installation instructions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Easiest way to install the KIM-API is Conda:","category":"page"},{"location":"","page":"Home","title":"Home","text":"conda create -n kim-api kim-api=2.4 -c conda-forge\nconda activate kim-api\nexport KIM_API_LIB=${CONDA_PREFIX}/lib/libkim-api.so","category":"page"},{"location":"#Package-Installation","page":"Home","title":"Package Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FOr latest version:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/ipcamit/KIMPortableModels.jl.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"KIMPortableModels\")","category":"page"},{"location":"#Environment-Setup","page":"Home","title":"Environment Setup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If KIM-API is not in your system library path, set the environment variable:","category":"page"},{"location":"","page":"Home","title":"Home","text":"export KIM_API_LIB=\"/path/to/libkim-api.so\"","category":"page"},{"location":"#Supported-Unit-Systems","page":"Home","title":"Supported Unit Systems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"KIMPortableModels.jl supports multiple unit systems commonly used in molecular dynamics:","category":"page"},{"location":"","page":"Home","title":"Home","text":"System Length Energy Charge Temperature Time\n:metal Ångström eV e K ps\n:real Ångström kcal/mol e K fs\n:si meter Joule C K s\n:cgs cm erg statC K s\n:electron Bohr Hartree e K fs","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also specify custom units by passing a named tuple of units during model creation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"custom_units = (length=KIMPortableModels.A, energy=KIMPortableModels.eV, time=KIMPortableModels.fs, charge=KIMPortableModels.e, temperature=KIMPortableModels.K)\nmodel_custom = KIMPortableModels.KIMModel(\"SW_StillingerWeber_1985_Si__MO_405512056662_006\",\n                                 units=custom_units)","category":"page"},{"location":"#KIM-Model-Access","page":"Home","title":"KIM Model Access","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Visit openkim.org to browse the complete model database.","category":"page"},{"location":"#Architecture","page":"Home","title":"Architecture","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is organized into several modules:","category":"page"},{"location":"","page":"Home","title":"Home","text":"libkim.jl: KIM-API library loading and initialization\nconstants.jl: KIM-API constants, enumerations, and unit systems\nmodel.jl: Low-level model creation and management\nspecies.jl: Species handling and validation\nneighborlist.jl: Neighbor list generation and callbacks\nhighlevel.jl: High-level user interface","category":"page"},{"location":"#Performance","page":"Home","title":"Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"KIMPortableModels.jl is designed for high performance:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pre-computed species mappings minimize lookup overhead\nEfficient neighbor list generation using NeighbourLists.jl\nZero-copy data passing to KIM-API where possible\nMinimal Julia-C FFI overhead\nAutomatic memory management prevents leaks","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Consider citing the original KIM-API paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{tadmor2011potential,\n  title={The potential of atomistic simulations and the knowledgebase of interatomic models},\n  author={Tadmor, Ellad B and Elliott, Ryan S and Sethna, James P and Miller, Ronald E and Becker, Chandler A},\n  journal={Jom},\n  volume={63},\n  number={7},\n  pages={17},\n  year={2011},\n  publisher={Springer Nature BV}\n}","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"KIMPortableModels.jl is released under the MIT License. See the LICENSE file for details.","category":"page"},{"location":"#Acknowledgments","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The OpenKIM project for providing the KIM-API framework\nThe Julia community for excellent packages like StaticArrays.jl and NeighbourLists.jl\nContributors to the KIM model database","category":"page"}]
}
